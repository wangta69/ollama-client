const axios = require('axios');
const cheerio = require('cheerio'); // HTML ÌååÏã±Ïö©
require('dotenv').config();
const mysql = require('mysql');

const pool = mysql.createPool({
  host: process.env.DB_HOST || '127.0.0.1',
  user: process.env.DB_USER || 'db_user',
  password: process.env.DB_PASSWORD || 'db_password',
  database: process.env.DB_DATABASE || 'database',
  port: process.env.DB_PORT || '3306',
  multipleStatements: true
});

// DB ÏøºÎ¶¨ Ìó¨Ìçº
function query(sql, params, callback) {
  if (typeof params === 'function') {
    callback = params;
    params = [];
  }

  pool.getConnection((err, connection) => {
    if (err) return callback(err);
    connection.query(sql, params, (err, results) => {
      connection.release();
      if (err) return callback(err);
      callback(null, results);
    });
  });
}

function truncate(text, maxLength) {
  if (!text) return '';
  return text.length <= maxLength ? text : text.slice(0, maxLength).trim();
}

function cleanValue(text) {
  return text.replace(/^["']+|["']+$/g, '').trim(); // ÏïûÎí§ " ÎòêÎäî ' Ï†úÍ±∞
}
// Ollama ÏùëÎãµ ÌååÏã± ÎèÑÏö∞ÎØ∏
function extractField(text, label) {
  const match = text.match(new RegExp(`${label}\\s*[:Ôºö\\-‚Äì]\\s*(.+)`, 'i'));
  return match ? cleanValue(match[1]) : '';
}

// Î©îÌÉÄ ÌÉúÍ∑∏ ÏÉùÏÑ±
async function fetchAndGenerateMeta(url) {
  try {
    const html = await axios.get(url).then(res => res.data);
    const $ = cheerio.load(html);

    // üîΩ Î≥∏Î¨∏ Í∏∞Î∞ò ÏΩòÌÖêÏ∏†Îßå Ï∂îÏ∂ú
    const content = [
      $('h1').first().text(),
      $('h2').first().text(),
      $('article').text(),
      $('section').text(),
      $('p').slice(0, 5).text()
    ].join('\n').replace(/\s+/g, ' ').trim(); // Í≥µÎ∞± Ï†ïÎ¶¨

    const prompt = `
Îã§ÏùåÏùÄ Ïõπ ÌéòÏù¥ÏßÄÏùò Î≥∏Î¨∏ ÎÇ¥Ïö©ÏûÖÎãàÎã§:

"${content}"

Ïù¥ ÎÇ¥Ïö©ÏùÑ Î∞îÌÉïÏúºÎ°ú ÏïÑÎûòÏùò Î©îÌÉÄ Ï†ïÎ≥¥Î•º ÌïúÍµ≠Ïñ¥Î°ú ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏÉùÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî. Í∑∏Î¶¨Í≥† seo ÌÉúÍ∑∏ ÌòïÏãùÏóê ÎßûÏ∂∞ ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî.:

title:
- 30Ïûê ÎÇ¥Ïô∏
- Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎ©¥ "Ïò®Ïä§ÌÜ†Î¶¨" Í∞ôÏùÄ Î¨∏Íµ¨Î°ú ÏûëÏÑ±
- Î¨∏Ïû•ÏùÑ ""Î°ú Í∞êÏã∏ÏßÄ Îßê Í≤É

keywords:
- 100Ïûê ÎÇ¥Ïô∏
- ÌïµÏã¨ Îã®Ïñ¥Îì§ÏùÑ ÎÇòÏó¥
- ÏâºÌëú ÏóÜÏù¥ ÎùÑÏñ¥Ïì∞Í∏∞Î°ú Íµ¨Î∂Ñ
- ÌèâÏ†ê, ÌèâÏ†êÎÇ®Í∏∞Í∏∞, Î¶¨Î∑∞, ÌõÑÍ∏∞ Îì±ÏùÄ Ï†úÏô∏

description:
- ÏïΩ 100Ïûê Ïù¥ÎÇ¥Ïùò ÏûêÏó∞Ïä§Îü¨Ïö¥ Î¨∏Ïû•
- ÎÅùÏóê ÎßàÏπ®ÌëúÎäî ÏÉùÎûµ

ÏïÑÎûò ÌòïÏãùÏúºÎ°ú Ï∂úÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî:

title: (ÏÉùÏÑ±Îêú Ï†úÎ™©)
keywords: (Îã®Ïñ¥ ÎÇòÏó¥)
description: (Î¨∏Ïû•)
`;

    const response = await axios.post('http://localhost:11434/api/generate', {
      model: "mistral",
      prompt,
      stream: false
    });

    const result = response.data.response;
    console.log("‚úÖ Î©îÌÉÄÌÉúÍ∑∏ Í≤∞Í≥º:\n", result);

    const title = truncate(extractField(result, 'title'), 100);
    const keywords = truncate(extractField(result, 'keywords'), 250);
    const description = extractField(result, 'description');

    console.log({ title, keywords, description });
    return { title, keywords, description };

  } catch (err) {
    console.error(`‚ùå ${url} Ï≤òÎ¶¨ Ïã§Ìå®:`, err.message);
    return null;
  }
}

// Ï†ÑÏ≤¥ Ïã§Ìñâ Î°úÏßÅ
// query('SELECT id, path FROM metas WHERE path IS NOT NULL', [], async (err, result) => {
query('SELECT id, path FROM metas WHERE path IS NOT NULL and id >=398 order by id asc', [], async (err, result) => {
  if (err) return console.error(err);

  for (const row of result) {
    const rawPath = row.path;
    let url = rawPath.startsWith('/') ? rawPath : '/' + rawPath;
    url = 'https://www.onstory.fun'+url;
    console.log(`üöÄ Processing: ${url}`);

    const meta = await fetchAndGenerateMeta(url);
    if (!meta) continue;

    const { title, keywords, description } = meta;

    // ÏµúÏ¢Ö ÏóÖÎç∞Ïù¥Ìä∏Îäî 25-07-09 Ïù¥Í≥† Îã§ÏùåÏóêÎäî Ïù¥ Ïù¥ÌõÑÏóê ÏóÖÎç∞Ïù¥Ìä∏ Îêú Í≤ÉÏóê ÎåÄÌï¥ Ï≤òÎ¶¨
    query(
      'UPDATE metas SET title = ?, keywords = ?, description = ? WHERE id = ?',
      [title, keywords, description, row.id],
      err => {
        if (err) {
          console.error(`‚ùå UPDATE Ïã§Ìå® (id: ${row.id}):`, err.message);
        } else {
          console.log(`‚úÖ UPDATED id: ${row.id}`);
        }
      }
    );

  }
});
